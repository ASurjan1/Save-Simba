


ARM Macro Assembler    Page 1 


    1 00000000         ; BusyWait.s
    2 00000000         ; Student names: Arnav Surjan
    3 00000000         ; Last modification date: 3/6/2023
    4 00000000         
    5 00000000         ; Runs on TM4C123
    6 00000000         
    7 00000000         
    8 00000000         
    9 00000000                 EXPORT           SPIOutCommand
   10 00000000                 EXPORT           SPIOutData
   11 00000000         
   12 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   13 00000000                 THUMB
   14 00000000                 ALIGN
   15 00000000         
   16 00000000         ; ***********SPIOutCommand*****************
   17 00000000         ; This is a helper function that sends an 8-bit command 
                       to the LCD.
   18 00000000         ; Inputs: R0 = 32-bit command (number)
   19 00000000         ;         R1 = 32-bit SPI status register address
   20 00000000         ;         R2 = 32-bit SPI data register address
   21 00000000         ;         R3 = 32-bit GPIO port address for D/C
   22 00000000         ; Outputs: none
   23 00000000         ; Assumes: SPI and GPIO have already been initialized an
                       d enabled
   24 00000000         ; Note: must be AAPCS compliant
   25 00000000         ; Note: access to bit 6 of GPIO must be friendly
   26 00000000         SPIOutCommand
   27 00000000         ; --UUU-- Code to write a command to the LCD
   28 00000000         ;1) Read the SPI status register (R1 has address) and ch
                       eck bit 4, 
   29 00000000         ;2) If bit 4 is high, loop back to step 1 (wait for BUSY
                        bit to be low)
   30 00000000         ;3) Clear D/C (GPIO bit 6) to zero, be friendly (R3 has 
                       address)
   31 00000000         ;4) Write the command to the SPI data register (R2 has a
                       ddress)
   32 00000000         ;5) Read the SPI status register (R1 has address) and ch
                       eck bit 4, 
   33 00000000         ;6) If bit 4 is high, loop back to step 5 (wait for BUSY
                        bit to be low)
   34 00000000         
   35 00000000 E92D 0FF0       PUSH             {R4-R11}
   36 00000004         
   37 00000004         waitLow1
   38 00000004 680C            LDR              R4, [R1]    ;1
   39 00000006 F004 0410       AND              R4, #0x10
   40 0000000A 2C00            CMP              R4, #0x00
   41 0000000C D8FA            BHI              waitLow1    ;2
   42 0000000E         
   43 0000000E 681D            LDR              R5, [R3]    ;3
   44 00000010 F025 0540       BIC              R5, #0x40
   45 00000014 601D            STR              R5, [R3]
   46 00000016         
   47 00000016 6010            STR              R0, [R2]    ;4
   48 00000018         
   49 00000018         waitLow2
   50 00000018 680C            LDR              R4, [R1]    ;5



ARM Macro Assembler    Page 2 


   51 0000001A F004 0410       AND              R4, #0x10
   52 0000001E 2C00            CMP              R4, #0x00
   53 00000020 D8FA            BHI              waitLow2    ;6
   54 00000022         
   55 00000022 E8BD 0FF0       POP              {R4-R11}
   56 00000026         
   57 00000026 4770            BX               LR          ;   return
   58 00000028         
   59 00000028         
   60 00000028         
   61 00000028         ; ***********SPIOutData*****************
   62 00000028         ; This is a helper function that sends an 8-bit data to 
                       the LCD.
   63 00000028         ; Inputs: R0 = 32-bit data (number)
   64 00000028         ;         R1 = 32-bit SPI status register address
   65 00000028         ;         R2 = 32-bit SPI data register address
   66 00000028         ;         R3 = 32-bit GPIO port address for D/C
   67 00000028         ; Outputs: none
   68 00000028         ; Assumes: SPI and GPIO have already been initialized an
                       d enabled
   69 00000028         ; Note: must be AAPCS compliant
   70 00000028         ; Note: access to bit 6 of GPIO must be friendly
   71 00000028         SPIOutData
   72 00000028         ; --UUU-- Code to write data to the LCD
   73 00000028         ;1) Read the SPI status register (R1 has address) and ch
                       eck bit 1, 
   74 00000028         ;2) If bit 1 is low, loop back to step 1 (wait for TNF b
                       it to be high)
   75 00000028         ;3) Set D/C (GPIO bit 6) to one, be friendly (R3 has add
                       ress)
   76 00000028         ;4) Write the data to the SPI data register (R2 has addr
                       ess)
   77 00000028         
   78 00000028 E92D 0FF0       PUSH             {R4-R11}
   79 0000002C         
   80 0000002C         waitHigh1
   81 0000002C 680C            LDR              R4, [R1]    ;1
   82 0000002E F004 0402       AND              R4, #0x02
   83 00000032 2C00            CMP              R4, #0x00
   84 00000034 D0FA            BEQ              waitHigh1   ;2
   85 00000036         
   86 00000036 681D            LDR              R5, [R3]    ;3
   87 00000038 F045 0540       ORR              R5, #0x40
   88 0000003C 601D            STR              R5, [R3]
   89 0000003E         
   90 0000003E 6010            STR              R0, [R2]    ; 4
   91 00000040         
   92 00000040 E8BD 0FF0       POP              {R4-R11}
   93 00000044         
   94 00000044 4770            BX               LR          ;return
   95 00000046         ;****************************************************
   96 00000046         
   97 00000046 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
   98 00000048                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4 --fpu=
SoftVFP --depend=.\busywait.d -o.\busywait.o -I.\RTE\_SaveSimba -IC:\Users\arna
v\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\arnav\A



ARM Macro Assembler    Page 3 


ppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="
__UVISION_VERSION SETA 538" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6P
M SETA 1" --predefine="_RTE_ SETA 1" --list=.\busywait.lst ..\inc\BusyWait.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 12 in file ..\inc\BusyWait.s
   Uses
      None
Comment: .text unused
SPIOutCommand 00000000

Symbol: SPIOutCommand
   Definitions
      At line 26 in file ..\inc\BusyWait.s
   Uses
      At line 9 in file ..\inc\BusyWait.s
Comment: SPIOutCommand used once
SPIOutData 00000028

Symbol: SPIOutData
   Definitions
      At line 71 in file ..\inc\BusyWait.s
   Uses
      At line 10 in file ..\inc\BusyWait.s
Comment: SPIOutData used once
waitHigh1 0000002C

Symbol: waitHigh1
   Definitions
      At line 80 in file ..\inc\BusyWait.s
   Uses
      At line 84 in file ..\inc\BusyWait.s
Comment: waitHigh1 used once
waitLow1 00000004

Symbol: waitLow1
   Definitions
      At line 37 in file ..\inc\BusyWait.s
   Uses
      At line 41 in file ..\inc\BusyWait.s
Comment: waitLow1 used once
waitLow2 00000018

Symbol: waitLow2
   Definitions
      At line 49 in file ..\inc\BusyWait.s
   Uses
      At line 53 in file ..\inc\BusyWait.s
Comment: waitLow2 used once
6 symbols
339 symbols in table
